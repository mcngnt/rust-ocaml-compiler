# 1 "parser/lexer.mll"
 
open Lexing
open Parser

let reserved_keywords =
  [ "and",      Parser.AND
  ; "break",    Parser.BREAK
  ; "do",       Parser.DO
  ; "else",     Parser.ELSE
  ; "elseif",   Parser.ELSEIF
  ; "end",      Parser.END
  ; "false",    Parser.FALSE
  ; "for",      Parser.FOR
  ; "function", Parser.FUNCTION
  ; "goto",     Parser.GOTO
  ; "if",       Parser.IF
  ; "in",       Parser.IN
  ; "local",    Parser.LOCAL
  ; "nil",      Parser.NIL
  ; "not",      Parser.NOT
  ; "or",       Parser.OR
  ; "repeat",   Parser.REPEAT
  ; "return",   Parser.RETURN
  ; "then",     Parser.THEN
  ; "true",     Parser.TRUE
  ; "until",    Parser.UNTIL
  ; "while",    Parser.WHILE
  ]

let next_line lexbuf =
  let pos = lexbuf.lex_curr_p in
  lexbuf.lex_curr_p <-
    { pos with pos_bol = lexbuf.lex_curr_pos;
               pos_lnum = pos.pos_lnum + 1
    }

# 39 "parser/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\213\255\214\255\216\255\217\255\218\255\002\000\067\000\
    \227\255\031\000\229\255\230\255\231\255\049\000\234\255\236\255\
    \237\255\238\255\242\255\243\255\071\000\069\000\070\000\248\255\
    \086\000\098\000\120\000\193\000\252\255\001\000\124\000\100\000\
    \066\000\097\000\255\255\012\001\130\000\035\001\161\000\174\000\
    \045\001\072\001\113\000\095\001\105\001\127\001\241\255\002\000\
    \099\000\247\255\004\000\220\255\245\255\233\255\219\255\223\255\
    \226\255\221\255\225\255\191\000\192\000\254\255\006\000\255\255\
    \101\000\255\255\102\000\187\000\255\255\007\000\155\001\175\001\
    \242\255\185\001\243\255\244\255\245\255\246\255\247\255\248\255\
    \249\255\250\255\251\255\008\000\252\255\253\255\254\255\255\255\
    \193\000\093\001\254\255\009\000\255\255\103\000\255\255\146\000\
    ";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\033\000\031\000\
    \255\255\027\000\255\255\255\255\255\255\023\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\011\000\009\000\040\000\255\255\
    \016\000\005\000\005\000\004\000\255\255\003\000\002\000\020\000\
    \001\000\255\255\255\255\255\255\255\255\005\000\255\255\005\000\
    \005\000\006\000\015\000\005\000\255\255\005\000\255\255\008\000\
    \255\255\255\255\008\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\002\000\255\255\001\000\255\255\
    \001\000\255\255\255\255\255\255\255\255\000\000\255\255\014\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\004\000\255\255\255\255\255\255\255\255\
    \255\255\002\000\255\255\001\000\255\255\001\000\255\255\255\255\
    ";
  Lexing.lex_default =
   "\255\255\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \000\000\255\255\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\060\000\060\000\000\000\255\255\000\000\
    \255\255\000\000\255\255\067\000\000\000\255\255\071\000\071\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \089\000\089\000\000\000\255\255\000\000\255\255\000\000\255\255\
    ";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\030\000\028\000\028\000\049\000\029\000\049\000\050\000\
    \061\000\068\000\082\000\090\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \030\000\000\000\023\000\005\000\000\000\011\000\010\000\023\000\
    \017\000\016\000\014\000\015\000\018\000\031\000\024\000\013\000\
    \026\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\020\000\019\000\007\000\021\000\006\000\057\000\
    \058\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\022\000\054\000\002\000\012\000\027\000\
    \053\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\004\000\008\000\003\000\009\000\056\000\
    \055\000\052\000\051\000\048\000\042\000\030\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \037\000\032\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\030\000\033\000\033\000\046\000\
    \048\000\047\000\066\000\066\000\095\000\000\000\037\000\036\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\034\000\036\000\047\000\000\000\
    \000\000\000\000\065\000\065\000\094\000\068\000\000\000\036\000\
    \069\000\061\000\255\255\090\000\062\000\255\255\091\000\095\000\
    \035\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\000\000\000\000\036\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\094\000\
    \035\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\063\000\255\255\092\000\000\000\
    \027\000\000\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\255\255\
    \038\000\000\000\255\255\000\000\000\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\000\000\000\000\000\000\000\000\000\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \038\000\041\000\041\000\041\000\041\000\041\000\041\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\000\000\044\000\255\255\000\000\000\000\
    \255\255\041\000\041\000\041\000\041\000\041\000\041\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\255\255\255\255\068\000\255\255\072\000\000\000\255\255\
    \255\255\255\255\072\000\082\000\044\000\000\000\083\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\077\000\000\000\000\000\000\000\000\000\
    \076\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\073\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\075\000\078\000\074\000\000\000\
    \000\000\000\000\087\000\086\000\000\000\000\000\000\000\085\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\084\000\
    \000\000\000\000\000\000\081\000\000\000\080\000\000\000\079\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\029\000\047\000\000\000\050\000\047\000\
    \062\000\069\000\083\000\091\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\009\000\000\000\000\000\000\000\
    \013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
    \007\000\020\000\021\000\022\000\024\000\030\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \025\000\031\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\030\000\032\000\033\000\042\000\
    \048\000\022\000\064\000\066\000\093\000\255\255\026\000\025\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\033\000\026\000\048\000\255\255\
    \255\255\255\255\064\000\066\000\093\000\067\000\255\255\025\000\
    \067\000\059\000\060\000\088\000\059\000\060\000\088\000\095\000\
    \026\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\255\255\255\255\026\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\095\000\
    \026\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\059\000\060\000\088\000\255\255\
    \027\000\255\255\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\035\000\035\000\035\000\
    \035\000\035\000\035\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\089\000\
    \037\000\255\255\089\000\255\255\255\255\035\000\035\000\035\000\
    \035\000\035\000\035\000\255\255\255\255\255\255\255\255\255\255\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \037\000\041\000\041\000\041\000\041\000\041\000\041\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\255\255\043\000\070\000\255\255\255\255\
    \070\000\041\000\041\000\041\000\041\000\041\000\041\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\071\000\089\000\067\000\071\000\070\000\255\255\059\000\
    \060\000\088\000\070\000\073\000\043\000\255\255\073\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\071\000\255\255\255\255\255\255\255\255\071\000\255\255\
    \255\255\255\255\255\255\073\000\255\255\255\255\255\255\255\255\
    \073\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\070\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\071\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\073\000\073\000\073\000\255\255\
    \255\255\255\255\073\000\073\000\255\255\255\255\255\255\073\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\073\000\
    \255\255\255\255\255\255\073\000\255\255\073\000\255\255\073\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\089\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\070\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\071\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_backtrk_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_default_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_trans_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\001\000\001\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check_code =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\022\000\048\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_code =
   "\255\001\255\255\000\001\255";
}

let rec read lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 2 (-1); __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 44 "parser/lexer.mll"
                           delimiter
# 383 "parser/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 45 "parser/lexer.mll"
      ( comment_long (String.length delimiter) lexbuf )
# 387 "parser/lexer.ml"

  | 1 ->
# 46 "parser/lexer.mll"
         ( comment lexbuf )
# 392 "parser/lexer.ml"

  | 2 ->
# 47 "parser/lexer.mll"
          ( read lexbuf )
# 397 "parser/lexer.ml"

  | 3 ->
# 48 "parser/lexer.mll"
            ( next_line lexbuf; read lexbuf )
# 402 "parser/lexer.ml"

  | 4 ->
let
# 49 "parser/lexer.mll"
            name
# 408 "parser/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 50 "parser/lexer.mll"
      ( try List.assoc name reserved_keywords
        with Not_found -> Parser.NAME name )
# 413 "parser/lexer.ml"

  | 5 ->
# 56 "parser/lexer.mll"
      ( try Parser.INTEGER (Int64.of_string (lexeme lexbuf))
        with Failure _ -> Parser.FLOAT (float_of_string (lexeme lexbuf)) )
# 419 "parser/lexer.ml"

  | 6 ->
# 59 "parser/lexer.mll"
      ( Parser.INTEGER (Int64.of_string (lexeme lexbuf)) )
# 424 "parser/lexer.ml"

  | 7 ->
let
# 60 "parser/lexer.mll"
                    delimiter
# 430 "parser/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 61 "parser/lexer.mll"
      ( Parser.LITERALSTRING
          (literal_string delimiter (Buffer.create 80) lexbuf) )
# 435 "parser/lexer.ml"

  | 8 ->
let
# 63 "parser/lexer.mll"
                      delimiter
# 441 "parser/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0) in
# 64 "parser/lexer.mll"
      ( Parser.LITERALSTRING
          (literal_string_long (String.length delimiter)
                               (Buffer.create 80) lexbuf) )
# 447 "parser/lexer.ml"

  | 9 ->
# 67 "parser/lexer.mll"
        ( EQUAL )
# 452 "parser/lexer.ml"

  | 10 ->
# 68 "parser/lexer.mll"
         ( DOUBLECOLON )
# 457 "parser/lexer.ml"

  | 11 ->
# 69 "parser/lexer.mll"
        ( COLON )
# 462 "parser/lexer.ml"

  | 12 ->
# 70 "parser/lexer.mll"
        ( SEMICOLON )
# 467 "parser/lexer.ml"

  | 13 ->
# 71 "parser/lexer.mll"
        ( COMMA )
# 472 "parser/lexer.ml"

  | 14 ->
# 72 "parser/lexer.mll"
          ( TRIPLEDOT )
# 477 "parser/lexer.ml"

  | 15 ->
# 73 "parser/lexer.mll"
         ( DOUBLEDOT )
# 482 "parser/lexer.ml"

  | 16 ->
# 74 "parser/lexer.mll"
        ( DOT )
# 487 "parser/lexer.ml"

  | 17 ->
# 75 "parser/lexer.mll"
        ( LPAREN )
# 492 "parser/lexer.ml"

  | 18 ->
# 76 "parser/lexer.mll"
        ( RPAREN )
# 497 "parser/lexer.ml"

  | 19 ->
# 77 "parser/lexer.mll"
        ( PLUS )
# 502 "parser/lexer.ml"

  | 20 ->
# 78 "parser/lexer.mll"
        ( HYPHEN )
# 507 "parser/lexer.ml"

  | 21 ->
# 79 "parser/lexer.mll"
        ( ASTERISK )
# 512 "parser/lexer.ml"

  | 22 ->
# 80 "parser/lexer.mll"
        ( DOUBLESLASH )
# 517 "parser/lexer.ml"

  | 23 ->
# 81 "parser/lexer.mll"
        ( SLASH )
# 522 "parser/lexer.ml"

  | 24 ->
# 82 "parser/lexer.mll"
        ( HAT )
# 527 "parser/lexer.ml"

  | 25 ->
# 83 "parser/lexer.mll"
        ( PERCENT )
# 532 "parser/lexer.ml"

  | 26 ->
# 84 "parser/lexer.mll"
        ( AMPERSAND )
# 537 "parser/lexer.ml"

  | 27 ->
# 85 "parser/lexer.mll"
        ( TILDA )
# 542 "parser/lexer.ml"

  | 28 ->
# 86 "parser/lexer.mll"
        ( VERTICALBAR )
# 547 "parser/lexer.ml"

  | 29 ->
# 87 "parser/lexer.mll"
         ( DOUBLELT )
# 552 "parser/lexer.ml"

  | 30 ->
# 88 "parser/lexer.mll"
         ( DOUBLEGT )
# 557 "parser/lexer.ml"

  | 31 ->
# 89 "parser/lexer.mll"
        ( LT )
# 562 "parser/lexer.ml"

  | 32 ->
# 90 "parser/lexer.mll"
         ( LTEQ )
# 567 "parser/lexer.ml"

  | 33 ->
# 91 "parser/lexer.mll"
        ( GT )
# 572 "parser/lexer.ml"

  | 34 ->
# 92 "parser/lexer.mll"
         ( GTEQ )
# 577 "parser/lexer.ml"

  | 35 ->
# 93 "parser/lexer.mll"
         ( DOUBLEEQUAL )
# 582 "parser/lexer.ml"

  | 36 ->
# 94 "parser/lexer.mll"
         ( TILDAEQUAL )
# 587 "parser/lexer.ml"

  | 37 ->
# 95 "parser/lexer.mll"
        ( SHARP )
# 592 "parser/lexer.ml"

  | 38 ->
# 96 "parser/lexer.mll"
        ( LBRACE )
# 597 "parser/lexer.ml"

  | 39 ->
# 97 "parser/lexer.mll"
        ( RBRACE )
# 602 "parser/lexer.ml"

  | 40 ->
# 98 "parser/lexer.mll"
        ( LBRACKET )
# 607 "parser/lexer.ml"

  | 41 ->
# 99 "parser/lexer.mll"
        ( RBRACKET )
# 612 "parser/lexer.ml"

  | 42 ->
# 100 "parser/lexer.mll"
        ( EOF )
# 617 "parser/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_rec lexbuf __ocaml_lex_state

and comment_long len lexbuf =
   __ocaml_lex_comment_long_rec len lexbuf 59
and __ocaml_lex_comment_long_rec len lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 103 "parser/lexer.mll"
        ( comment_long_brk len lexbuf )
# 629 "parser/lexer.ml"

  | 1 ->
# 105 "parser/lexer.mll"
      ( next_line lexbuf;
        comment_long len lexbuf )
# 635 "parser/lexer.ml"

  | 2 ->
# 108 "parser/lexer.mll"
      ( comment_long len lexbuf )
# 640 "parser/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_long_rec len lexbuf __ocaml_lex_state

and comment_long_brk len lexbuf =
   __ocaml_lex_comment_long_brk_rec len lexbuf 64
and __ocaml_lex_comment_long_brk_rec len lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 111 "parser/lexer.mll"
            s
# 653 "parser/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 112 "parser/lexer.mll"
      ( if String.length s + 2 = len then read lexbuf
        else comment_long_brk len lexbuf )
# 658 "parser/lexer.ml"

  | 1 ->
# 115 "parser/lexer.mll"
      ( comment_long len lexbuf )
# 663 "parser/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_long_brk_rec len lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 67
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 118 "parser/lexer.mll"
                                   ( next_line lexbuf; read lexbuf )
# 675 "parser/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and literal_string open_delimiter buf lexbuf =
   __ocaml_lex_literal_string_rec open_delimiter buf lexbuf 70
and __ocaml_lex_literal_string_rec open_delimiter buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 122 "parser/lexer.mll"
      ( Buffer.add_char buf '\007'; literal_string open_delimiter buf lexbuf )
# 687 "parser/lexer.ml"

  | 1 ->
# 124 "parser/lexer.mll"
      ( Buffer.add_char buf '\008'; literal_string open_delimiter buf lexbuf )
# 692 "parser/lexer.ml"

  | 2 ->
# 126 "parser/lexer.mll"
      ( Buffer.add_char buf '\012'; literal_string open_delimiter buf lexbuf )
# 697 "parser/lexer.ml"

  | 3 ->
# 128 "parser/lexer.mll"
      ( Buffer.add_char buf '\n';   literal_string open_delimiter buf lexbuf )
# 702 "parser/lexer.ml"

  | 4 ->
# 130 "parser/lexer.mll"
      ( next_line lexbuf;
        Buffer.add_char buf '\n';   literal_string open_delimiter buf lexbuf )
# 708 "parser/lexer.ml"

  | 5 ->
# 133 "parser/lexer.mll"
      ( Buffer.add_char buf '\r';   literal_string open_delimiter buf lexbuf )
# 713 "parser/lexer.ml"

  | 6 ->
# 135 "parser/lexer.mll"
      ( Buffer.add_char buf '\t';   literal_string open_delimiter buf lexbuf )
# 718 "parser/lexer.ml"

  | 7 ->
# 137 "parser/lexer.mll"
      ( Buffer.add_char buf '\011'; literal_string open_delimiter buf lexbuf )
# 723 "parser/lexer.ml"

  | 8 ->
# 139 "parser/lexer.mll"
      ( Buffer.add_char buf '\\';   literal_string open_delimiter buf lexbuf )
# 728 "parser/lexer.ml"

  | 9 ->
# 141 "parser/lexer.mll"
      ( Buffer.add_char buf '"';    literal_string open_delimiter buf lexbuf )
# 733 "parser/lexer.ml"

  | 10 ->
# 143 "parser/lexer.mll"
      ( Buffer.add_char buf '\'';   literal_string open_delimiter buf lexbuf )
# 738 "parser/lexer.ml"

  | 11 ->
# 145 "parser/lexer.mll"
      ( Buffer.add_char buf '[';    literal_string open_delimiter buf lexbuf )
# 743 "parser/lexer.ml"

  | 12 ->
# 147 "parser/lexer.mll"
      ( Buffer.add_char buf ']';    literal_string open_delimiter buf lexbuf )
# 748 "parser/lexer.ml"

  | 13 ->
let
# 149 "parser/lexer.mll"
                  c
# 754 "parser/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 150 "parser/lexer.mll"
      ( if c = open_delimiter then Buffer.contents buf
        else begin
          Buffer.add_char buf c;
          literal_string open_delimiter buf lexbuf
        end )
# 762 "parser/lexer.ml"

  | 14 ->
let
# 155 "parser/lexer.mll"
                                   s
# 768 "parser/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 156 "parser/lexer.mll"
      ( Buffer.add_string buf s;
        literal_string open_delimiter buf lexbuf )
# 773 "parser/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_literal_string_rec open_delimiter buf lexbuf __ocaml_lex_state

and literal_string_long len buf lexbuf =
   __ocaml_lex_literal_string_long_rec len buf lexbuf 88
and __ocaml_lex_literal_string_long_rec len buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 160 "parser/lexer.mll"
        ( literal_string_long_brk len buf lexbuf )
# 785 "parser/lexer.ml"

  | 1 ->
# 162 "parser/lexer.mll"
      ( next_line lexbuf;
        Buffer.add_char buf '\n';
        literal_string_long len buf lexbuf )
# 792 "parser/lexer.ml"

  | 2 ->
let
# 165 "parser/lexer.mll"
                          s
# 798 "parser/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 166 "parser/lexer.mll"
      ( Buffer.add_string buf s;
        literal_string_long len buf lexbuf )
# 803 "parser/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_literal_string_long_rec len buf lexbuf __ocaml_lex_state

and literal_string_long_brk len buf lexbuf =
   __ocaml_lex_literal_string_long_brk_rec len buf lexbuf 93
and __ocaml_lex_literal_string_long_brk_rec len buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 170 "parser/lexer.mll"
            s
# 816 "parser/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 171 "parser/lexer.mll"
      ( if String.length s + 2 = len then Buffer.contents buf
        else begin
          Buffer.add_char buf ']';
          Buffer.add_string buf s;
          literal_string_long_brk len buf lexbuf
        end )
# 825 "parser/lexer.ml"

  | 1 ->
# 178 "parser/lexer.mll"
      ( Buffer.add_char buf ']';
        literal_string_long len buf lexbuf )
# 831 "parser/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_literal_string_long_brk_rec len buf lexbuf __ocaml_lex_state

;;

